// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"context"
	"github.com/nao1215/sqluv/config"
	"github.com/nao1215/sqluv/infrastructure/memory"
	"github.com/nao1215/sqluv/infrastructure/persistence"
	"github.com/nao1215/sqluv/interactor"
	"github.com/nao1215/sqluv/tui"
)

// Injectors from wire.go:

// New creates a new sqluv command instance.
func NewSqluv(ctx context.Context, arg *config.Argument) (*tui.TUI, func(), error) {
	awsConfig, err := config.NewAWSConfig(ctx)
	if err != nil {
		return nil, nil, err
	}
	s3Client := persistence.NewS3Client(awsConfig)
	csvReader := persistence.NewCSVReader(s3Client)
	tsvReader := persistence.NewTSVReader(s3Client)
	ltsvReader := persistence.NewLTSVReader(s3Client)
	fileReader := interactor.NewFileReader(csvReader, tsvReader, ltsvReader)
	csvWriter := persistence.NewCSVWriter()
	tsvWriter := persistence.NewTSVWriter()
	ltsvWriter := persistence.NewLTSVWriter()
	fileWriter := interactor.NewFileWriter(csvWriter, tsvWriter, ltsvWriter)
	memoryDB, cleanup, err := config.NewMemoryDB()
	if err != nil {
		return nil, nil, err
	}
	tableCreator := memory.NewTableCreator(memoryDB)
	usecaseTableCreator := interactor.NewTableCreator(tableCreator)
	tablesGetter := memory.NewTableGetter(memoryDB)
	usecaseTablesGetter := interactor.NewLocalTablesGetter(tablesGetter)
	tableDDLGetter := memory.NewTableDDLGetter(memoryDB)
	usecaseTableDDLGetter := interactor.NewTableDDLGetter(tableDDLGetter)
	queryExecutor := memory.NewQueryExecutor(memoryDB)
	statementExecutor := memory.NewStatementExecutor(memoryDB)
	sqlExecutor := interactor.NewSQLExecutor(queryExecutor, statementExecutor)
	recordsInserter := memory.NewRecordInserter(memoryDB)
	usecaseRecordsInserter := interactor.NewRecordsInserter(recordsInserter)
	dbConfig, err := config.NewDBConfig()
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	historyDB, cleanup2, err := config.NewHistoryDB(dbConfig)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	historyTableCreator := persistence.NewHistoryTableCreator(historyDB)
	usecaseHistoryTableCreator := interactor.NewHistoryTableCreator(historyTableCreator)
	historyCreator := persistence.NewHistoryCreator(historyDB)
	usecaseHistoryCreator := interactor.NewHistoryCreator(historyCreator)
	historyLister := persistence.NewHistoryLister(historyDB)
	usecaseHistoryLister := interactor.NewHistoryLister(historyLister)
	colorConfig, err := config.NewColorConfig()
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	tuiTUI := tui.NewTUI(arg, fileReader, fileWriter, usecaseTableCreator, usecaseTablesGetter, usecaseTableDDLGetter, sqlExecutor, usecaseRecordsInserter, usecaseHistoryTableCreator, usecaseHistoryCreator, usecaseHistoryLister, dbConfig, colorConfig)
	return tuiTUI, func() {
		cleanup2()
		cleanup()
	}, nil
}
