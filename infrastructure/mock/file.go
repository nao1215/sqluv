// Code generated by MockGen. DO NOT EDIT.
// Source: file.go
//
// Generated by this command:
//
//	mockgen -typed -source=file.go -destination=../../infrastructure/mock/file.go -package mock
//

// Package mock is a generated GoMock package.
package mock

import (
	os "os"
	reflect "reflect"

	model "github.com/nao1215/sqluv/domain/model"
	gomock "go.uber.org/mock/gomock"
)

// MockCSVReader is a mock of CSVReader interface.
type MockCSVReader struct {
	ctrl     *gomock.Controller
	recorder *MockCSVReaderMockRecorder
	isgomock struct{}
}

// MockCSVReaderMockRecorder is the mock recorder for MockCSVReader.
type MockCSVReaderMockRecorder struct {
	mock *MockCSVReader
}

// NewMockCSVReader creates a new mock instance.
func NewMockCSVReader(ctrl *gomock.Controller) *MockCSVReader {
	mock := &MockCSVReader{ctrl: ctrl}
	mock.recorder = &MockCSVReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCSVReader) EXPECT() *MockCSVReaderMockRecorder {
	return m.recorder
}

// ReadCSV mocks base method.
func (m *MockCSVReader) ReadCSV(f *os.File) (*model.Table, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadCSV", f)
	ret0, _ := ret[0].(*model.Table)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadCSV indicates an expected call of ReadCSV.
func (mr *MockCSVReaderMockRecorder) ReadCSV(f any) *MockCSVReaderReadCSVCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadCSV", reflect.TypeOf((*MockCSVReader)(nil).ReadCSV), f)
	return &MockCSVReaderReadCSVCall{Call: call}
}

// MockCSVReaderReadCSVCall wrap *gomock.Call
type MockCSVReaderReadCSVCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCSVReaderReadCSVCall) Return(arg0 *model.Table, arg1 error) *MockCSVReaderReadCSVCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCSVReaderReadCSVCall) Do(f func(*os.File) (*model.Table, error)) *MockCSVReaderReadCSVCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCSVReaderReadCSVCall) DoAndReturn(f func(*os.File) (*model.Table, error)) *MockCSVReaderReadCSVCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockTSVReader is a mock of TSVReader interface.
type MockTSVReader struct {
	ctrl     *gomock.Controller
	recorder *MockTSVReaderMockRecorder
	isgomock struct{}
}

// MockTSVReaderMockRecorder is the mock recorder for MockTSVReader.
type MockTSVReaderMockRecorder struct {
	mock *MockTSVReader
}

// NewMockTSVReader creates a new mock instance.
func NewMockTSVReader(ctrl *gomock.Controller) *MockTSVReader {
	mock := &MockTSVReader{ctrl: ctrl}
	mock.recorder = &MockTSVReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTSVReader) EXPECT() *MockTSVReaderMockRecorder {
	return m.recorder
}

// ReadTSV mocks base method.
func (m *MockTSVReader) ReadTSV(f *os.File) (*model.Table, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadTSV", f)
	ret0, _ := ret[0].(*model.Table)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadTSV indicates an expected call of ReadTSV.
func (mr *MockTSVReaderMockRecorder) ReadTSV(f any) *MockTSVReaderReadTSVCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadTSV", reflect.TypeOf((*MockTSVReader)(nil).ReadTSV), f)
	return &MockTSVReaderReadTSVCall{Call: call}
}

// MockTSVReaderReadTSVCall wrap *gomock.Call
type MockTSVReaderReadTSVCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTSVReaderReadTSVCall) Return(arg0 *model.Table, arg1 error) *MockTSVReaderReadTSVCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTSVReaderReadTSVCall) Do(f func(*os.File) (*model.Table, error)) *MockTSVReaderReadTSVCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTSVReaderReadTSVCall) DoAndReturn(f func(*os.File) (*model.Table, error)) *MockTSVReaderReadTSVCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockLTSVReader is a mock of LTSVReader interface.
type MockLTSVReader struct {
	ctrl     *gomock.Controller
	recorder *MockLTSVReaderMockRecorder
	isgomock struct{}
}

// MockLTSVReaderMockRecorder is the mock recorder for MockLTSVReader.
type MockLTSVReaderMockRecorder struct {
	mock *MockLTSVReader
}

// NewMockLTSVReader creates a new mock instance.
func NewMockLTSVReader(ctrl *gomock.Controller) *MockLTSVReader {
	mock := &MockLTSVReader{ctrl: ctrl}
	mock.recorder = &MockLTSVReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLTSVReader) EXPECT() *MockLTSVReaderMockRecorder {
	return m.recorder
}

// ReadLTSV mocks base method.
func (m *MockLTSVReader) ReadLTSV(f *os.File) (*model.Table, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadLTSV", f)
	ret0, _ := ret[0].(*model.Table)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadLTSV indicates an expected call of ReadLTSV.
func (mr *MockLTSVReaderMockRecorder) ReadLTSV(f any) *MockLTSVReaderReadLTSVCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadLTSV", reflect.TypeOf((*MockLTSVReader)(nil).ReadLTSV), f)
	return &MockLTSVReaderReadLTSVCall{Call: call}
}

// MockLTSVReaderReadLTSVCall wrap *gomock.Call
type MockLTSVReaderReadLTSVCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLTSVReaderReadLTSVCall) Return(arg0 *model.Table, arg1 error) *MockLTSVReaderReadLTSVCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLTSVReaderReadLTSVCall) Do(f func(*os.File) (*model.Table, error)) *MockLTSVReaderReadLTSVCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLTSVReaderReadLTSVCall) DoAndReturn(f func(*os.File) (*model.Table, error)) *MockLTSVReaderReadLTSVCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
