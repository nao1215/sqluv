// Code generated by MockGen. DO NOT EDIT.
// Source: in_memory.go
//
// Generated by this command:
//
//	mockgen -typed -source=in_memory.go -destination=../../infrastructure/mock/in_memory.go -package mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	model "github.com/nao1215/sqluv/domain/model"
	gomock "go.uber.org/mock/gomock"
)

// MockTableCreator is a mock of TableCreator interface.
type MockTableCreator struct {
	ctrl     *gomock.Controller
	recorder *MockTableCreatorMockRecorder
	isgomock struct{}
}

// MockTableCreatorMockRecorder is the mock recorder for MockTableCreator.
type MockTableCreatorMockRecorder struct {
	mock *MockTableCreator
}

// NewMockTableCreator creates a new mock instance.
func NewMockTableCreator(ctrl *gomock.Controller) *MockTableCreator {
	mock := &MockTableCreator{ctrl: ctrl}
	mock.recorder = &MockTableCreatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTableCreator) EXPECT() *MockTableCreatorMockRecorder {
	return m.recorder
}

// CreateTable mocks base method.
func (m *MockTableCreator) CreateTable(ctx context.Context, t *model.Table) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTable", ctx, t)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTable indicates an expected call of CreateTable.
func (mr *MockTableCreatorMockRecorder) CreateTable(ctx, t any) *MockTableCreatorCreateTableCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTable", reflect.TypeOf((*MockTableCreator)(nil).CreateTable), ctx, t)
	return &MockTableCreatorCreateTableCall{Call: call}
}

// MockTableCreatorCreateTableCall wrap *gomock.Call
type MockTableCreatorCreateTableCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTableCreatorCreateTableCall) Return(arg0 error) *MockTableCreatorCreateTableCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTableCreatorCreateTableCall) Do(f func(context.Context, *model.Table) error) *MockTableCreatorCreateTableCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTableCreatorCreateTableCall) DoAndReturn(f func(context.Context, *model.Table) error) *MockTableCreatorCreateTableCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockTablesGetter is a mock of TablesGetter interface.
type MockTablesGetter struct {
	ctrl     *gomock.Controller
	recorder *MockTablesGetterMockRecorder
	isgomock struct{}
}

// MockTablesGetterMockRecorder is the mock recorder for MockTablesGetter.
type MockTablesGetterMockRecorder struct {
	mock *MockTablesGetter
}

// NewMockTablesGetter creates a new mock instance.
func NewMockTablesGetter(ctrl *gomock.Controller) *MockTablesGetter {
	mock := &MockTablesGetter{ctrl: ctrl}
	mock.recorder = &MockTablesGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTablesGetter) EXPECT() *MockTablesGetterMockRecorder {
	return m.recorder
}

// GetTables mocks base method.
func (m *MockTablesGetter) GetTables(ctx context.Context) ([]*model.Table, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTables", ctx)
	ret0, _ := ret[0].([]*model.Table)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTables indicates an expected call of GetTables.
func (mr *MockTablesGetterMockRecorder) GetTables(ctx any) *MockTablesGetterGetTablesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTables", reflect.TypeOf((*MockTablesGetter)(nil).GetTables), ctx)
	return &MockTablesGetterGetTablesCall{Call: call}
}

// MockTablesGetterGetTablesCall wrap *gomock.Call
type MockTablesGetterGetTablesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTablesGetterGetTablesCall) Return(arg0 []*model.Table, arg1 error) *MockTablesGetterGetTablesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTablesGetterGetTablesCall) Do(f func(context.Context) ([]*model.Table, error)) *MockTablesGetterGetTablesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTablesGetterGetTablesCall) DoAndReturn(f func(context.Context) ([]*model.Table, error)) *MockTablesGetterGetTablesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockRecordsInserter is a mock of RecordsInserter interface.
type MockRecordsInserter struct {
	ctrl     *gomock.Controller
	recorder *MockRecordsInserterMockRecorder
	isgomock struct{}
}

// MockRecordsInserterMockRecorder is the mock recorder for MockRecordsInserter.
type MockRecordsInserterMockRecorder struct {
	mock *MockRecordsInserter
}

// NewMockRecordsInserter creates a new mock instance.
func NewMockRecordsInserter(ctrl *gomock.Controller) *MockRecordsInserter {
	mock := &MockRecordsInserter{ctrl: ctrl}
	mock.recorder = &MockRecordsInserterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRecordsInserter) EXPECT() *MockRecordsInserterMockRecorder {
	return m.recorder
}

// InsertRecords mocks base method.
func (m *MockRecordsInserter) InsertRecords(ctx context.Context, t *model.Table) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertRecords", ctx, t)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertRecords indicates an expected call of InsertRecords.
func (mr *MockRecordsInserterMockRecorder) InsertRecords(ctx, t any) *MockRecordsInserterInsertRecordsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertRecords", reflect.TypeOf((*MockRecordsInserter)(nil).InsertRecords), ctx, t)
	return &MockRecordsInserterInsertRecordsCall{Call: call}
}

// MockRecordsInserterInsertRecordsCall wrap *gomock.Call
type MockRecordsInserterInsertRecordsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRecordsInserterInsertRecordsCall) Return(arg0 error) *MockRecordsInserterInsertRecordsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRecordsInserterInsertRecordsCall) Do(f func(context.Context, *model.Table) error) *MockRecordsInserterInsertRecordsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRecordsInserterInsertRecordsCall) DoAndReturn(f func(context.Context, *model.Table) error) *MockRecordsInserterInsertRecordsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockQueryExecutor is a mock of QueryExecutor interface.
type MockQueryExecutor struct {
	ctrl     *gomock.Controller
	recorder *MockQueryExecutorMockRecorder
	isgomock struct{}
}

// MockQueryExecutorMockRecorder is the mock recorder for MockQueryExecutor.
type MockQueryExecutorMockRecorder struct {
	mock *MockQueryExecutor
}

// NewMockQueryExecutor creates a new mock instance.
func NewMockQueryExecutor(ctrl *gomock.Controller) *MockQueryExecutor {
	mock := &MockQueryExecutor{ctrl: ctrl}
	mock.recorder = &MockQueryExecutorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQueryExecutor) EXPECT() *MockQueryExecutorMockRecorder {
	return m.recorder
}

// ExecuteQuery mocks base method.
func (m *MockQueryExecutor) ExecuteQuery(ctx context.Context, sql *model.SQL) (*model.Table, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteQuery", ctx, sql)
	ret0, _ := ret[0].(*model.Table)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteQuery indicates an expected call of ExecuteQuery.
func (mr *MockQueryExecutorMockRecorder) ExecuteQuery(ctx, sql any) *MockQueryExecutorExecuteQueryCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteQuery", reflect.TypeOf((*MockQueryExecutor)(nil).ExecuteQuery), ctx, sql)
	return &MockQueryExecutorExecuteQueryCall{Call: call}
}

// MockQueryExecutorExecuteQueryCall wrap *gomock.Call
type MockQueryExecutorExecuteQueryCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockQueryExecutorExecuteQueryCall) Return(arg0 *model.Table, arg1 error) *MockQueryExecutorExecuteQueryCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockQueryExecutorExecuteQueryCall) Do(f func(context.Context, *model.SQL) (*model.Table, error)) *MockQueryExecutorExecuteQueryCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockQueryExecutorExecuteQueryCall) DoAndReturn(f func(context.Context, *model.SQL) (*model.Table, error)) *MockQueryExecutorExecuteQueryCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockStatementExecutor is a mock of StatementExecutor interface.
type MockStatementExecutor struct {
	ctrl     *gomock.Controller
	recorder *MockStatementExecutorMockRecorder
	isgomock struct{}
}

// MockStatementExecutorMockRecorder is the mock recorder for MockStatementExecutor.
type MockStatementExecutorMockRecorder struct {
	mock *MockStatementExecutor
}

// NewMockStatementExecutor creates a new mock instance.
func NewMockStatementExecutor(ctrl *gomock.Controller) *MockStatementExecutor {
	mock := &MockStatementExecutor{ctrl: ctrl}
	mock.recorder = &MockStatementExecutorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStatementExecutor) EXPECT() *MockStatementExecutorMockRecorder {
	return m.recorder
}

// ExecuteStatement mocks base method.
func (m *MockStatementExecutor) ExecuteStatement(ctx context.Context, sql *model.SQL) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteStatement", ctx, sql)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteStatement indicates an expected call of ExecuteStatement.
func (mr *MockStatementExecutorMockRecorder) ExecuteStatement(ctx, sql any) *MockStatementExecutorExecuteStatementCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteStatement", reflect.TypeOf((*MockStatementExecutor)(nil).ExecuteStatement), ctx, sql)
	return &MockStatementExecutorExecuteStatementCall{Call: call}
}

// MockStatementExecutorExecuteStatementCall wrap *gomock.Call
type MockStatementExecutorExecuteStatementCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStatementExecutorExecuteStatementCall) Return(arg0 int64, arg1 error) *MockStatementExecutorExecuteStatementCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStatementExecutorExecuteStatementCall) Do(f func(context.Context, *model.SQL) (int64, error)) *MockStatementExecutorExecuteStatementCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStatementExecutorExecuteStatementCall) DoAndReturn(f func(context.Context, *model.SQL) (int64, error)) *MockStatementExecutorExecuteStatementCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockTableDDLGetter is a mock of TableDDLGetter interface.
type MockTableDDLGetter struct {
	ctrl     *gomock.Controller
	recorder *MockTableDDLGetterMockRecorder
	isgomock struct{}
}

// MockTableDDLGetterMockRecorder is the mock recorder for MockTableDDLGetter.
type MockTableDDLGetterMockRecorder struct {
	mock *MockTableDDLGetter
}

// NewMockTableDDLGetter creates a new mock instance.
func NewMockTableDDLGetter(ctrl *gomock.Controller) *MockTableDDLGetter {
	mock := &MockTableDDLGetter{ctrl: ctrl}
	mock.recorder = &MockTableDDLGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTableDDLGetter) EXPECT() *MockTableDDLGetterMockRecorder {
	return m.recorder
}

// GetTableDDL mocks base method.
func (m *MockTableDDLGetter) GetTableDDL(ctx context.Context, tableName string) ([]*model.Table, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTableDDL", ctx, tableName)
	ret0, _ := ret[0].([]*model.Table)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTableDDL indicates an expected call of GetTableDDL.
func (mr *MockTableDDLGetterMockRecorder) GetTableDDL(ctx, tableName any) *MockTableDDLGetterGetTableDDLCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTableDDL", reflect.TypeOf((*MockTableDDLGetter)(nil).GetTableDDL), ctx, tableName)
	return &MockTableDDLGetterGetTableDDLCall{Call: call}
}

// MockTableDDLGetterGetTableDDLCall wrap *gomock.Call
type MockTableDDLGetterGetTableDDLCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTableDDLGetterGetTableDDLCall) Return(arg0 []*model.Table, arg1 error) *MockTableDDLGetterGetTableDDLCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTableDDLGetterGetTableDDLCall) Do(f func(context.Context, string) ([]*model.Table, error)) *MockTableDDLGetterGetTableDDLCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTableDDLGetterGetTableDDLCall) DoAndReturn(f func(context.Context, string) ([]*model.Table, error)) *MockTableDDLGetterGetTableDDLCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
