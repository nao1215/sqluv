// Code generated by MockGen. DO NOT EDIT.
// Source: in_memory.go
//
// Generated by this command:
//
//	mockgen -typed -source=in_memory.go -destination=../interactor/mock/in_memory.go -package mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	model "github.com/nao1215/sqluv/domain/model"
	usecase "github.com/nao1215/sqluv/usecase"
	gomock "go.uber.org/mock/gomock"
)

// MockTableCreator is a mock of TableCreator interface.
type MockTableCreator struct {
	ctrl     *gomock.Controller
	recorder *MockTableCreatorMockRecorder
	isgomock struct{}
}

// MockTableCreatorMockRecorder is the mock recorder for MockTableCreator.
type MockTableCreatorMockRecorder struct {
	mock *MockTableCreator
}

// NewMockTableCreator creates a new mock instance.
func NewMockTableCreator(ctrl *gomock.Controller) *MockTableCreator {
	mock := &MockTableCreator{ctrl: ctrl}
	mock.recorder = &MockTableCreatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTableCreator) EXPECT() *MockTableCreatorMockRecorder {
	return m.recorder
}

// CreateTable mocks base method.
func (m *MockTableCreator) CreateTable(ctx context.Context, t *model.Table) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTable", ctx, t)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTable indicates an expected call of CreateTable.
func (mr *MockTableCreatorMockRecorder) CreateTable(ctx, t any) *MockTableCreatorCreateTableCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTable", reflect.TypeOf((*MockTableCreator)(nil).CreateTable), ctx, t)
	return &MockTableCreatorCreateTableCall{Call: call}
}

// MockTableCreatorCreateTableCall wrap *gomock.Call
type MockTableCreatorCreateTableCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTableCreatorCreateTableCall) Return(arg0 error) *MockTableCreatorCreateTableCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTableCreatorCreateTableCall) Do(f func(context.Context, *model.Table) error) *MockTableCreatorCreateTableCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTableCreatorCreateTableCall) DoAndReturn(f func(context.Context, *model.Table) error) *MockTableCreatorCreateTableCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockRecordsInserter is a mock of RecordsInserter interface.
type MockRecordsInserter struct {
	ctrl     *gomock.Controller
	recorder *MockRecordsInserterMockRecorder
	isgomock struct{}
}

// MockRecordsInserterMockRecorder is the mock recorder for MockRecordsInserter.
type MockRecordsInserterMockRecorder struct {
	mock *MockRecordsInserter
}

// NewMockRecordsInserter creates a new mock instance.
func NewMockRecordsInserter(ctrl *gomock.Controller) *MockRecordsInserter {
	mock := &MockRecordsInserter{ctrl: ctrl}
	mock.recorder = &MockRecordsInserterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRecordsInserter) EXPECT() *MockRecordsInserterMockRecorder {
	return m.recorder
}

// InsertRecords mocks base method.
func (m *MockRecordsInserter) InsertRecords(ctx context.Context, t *model.Table) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertRecords", ctx, t)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertRecords indicates an expected call of InsertRecords.
func (mr *MockRecordsInserterMockRecorder) InsertRecords(ctx, t any) *MockRecordsInserterInsertRecordsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertRecords", reflect.TypeOf((*MockRecordsInserter)(nil).InsertRecords), ctx, t)
	return &MockRecordsInserterInsertRecordsCall{Call: call}
}

// MockRecordsInserterInsertRecordsCall wrap *gomock.Call
type MockRecordsInserterInsertRecordsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRecordsInserterInsertRecordsCall) Return(arg0 error) *MockRecordsInserterInsertRecordsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRecordsInserterInsertRecordsCall) Do(f func(context.Context, *model.Table) error) *MockRecordsInserterInsertRecordsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRecordsInserterInsertRecordsCall) DoAndReturn(f func(context.Context, *model.Table) error) *MockRecordsInserterInsertRecordsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockSQLExecutor is a mock of SQLExecutor interface.
type MockSQLExecutor struct {
	ctrl     *gomock.Controller
	recorder *MockSQLExecutorMockRecorder
	isgomock struct{}
}

// MockSQLExecutorMockRecorder is the mock recorder for MockSQLExecutor.
type MockSQLExecutorMockRecorder struct {
	mock *MockSQLExecutor
}

// NewMockSQLExecutor creates a new mock instance.
func NewMockSQLExecutor(ctrl *gomock.Controller) *MockSQLExecutor {
	mock := &MockSQLExecutor{ctrl: ctrl}
	mock.recorder = &MockSQLExecutorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSQLExecutor) EXPECT() *MockSQLExecutorMockRecorder {
	return m.recorder
}

// ExecuteSQL mocks base method.
func (m *MockSQLExecutor) ExecuteSQL(ctx context.Context, sql *model.SQL) (*usecase.ExecuteSQLOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteSQL", ctx, sql)
	ret0, _ := ret[0].(*usecase.ExecuteSQLOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteSQL indicates an expected call of ExecuteSQL.
func (mr *MockSQLExecutorMockRecorder) ExecuteSQL(ctx, sql any) *MockSQLExecutorExecuteSQLCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteSQL", reflect.TypeOf((*MockSQLExecutor)(nil).ExecuteSQL), ctx, sql)
	return &MockSQLExecutorExecuteSQLCall{Call: call}
}

// MockSQLExecutorExecuteSQLCall wrap *gomock.Call
type MockSQLExecutorExecuteSQLCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSQLExecutorExecuteSQLCall) Return(arg0 *usecase.ExecuteSQLOutput, arg1 error) *MockSQLExecutorExecuteSQLCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSQLExecutorExecuteSQLCall) Do(f func(context.Context, *model.SQL) (*usecase.ExecuteSQLOutput, error)) *MockSQLExecutorExecuteSQLCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSQLExecutorExecuteSQLCall) DoAndReturn(f func(context.Context, *model.SQL) (*usecase.ExecuteSQLOutput, error)) *MockSQLExecutorExecuteSQLCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
