// Code generated by MockGen. DO NOT EDIT.
// Source: persistence.go
//
// Generated by this command:
//
//	mockgen -typed -source=persistence.go -destination=../interactor/mock/persistence.go -package mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	model "github.com/nao1215/sqluv/domain/model"
	usecase "github.com/nao1215/sqluv/usecase"
	gomock "go.uber.org/mock/gomock"
)

// MockQueryExecutor is a mock of QueryExecutor interface.
type MockQueryExecutor struct {
	ctrl     *gomock.Controller
	recorder *MockQueryExecutorMockRecorder
	isgomock struct{}
}

// MockQueryExecutorMockRecorder is the mock recorder for MockQueryExecutor.
type MockQueryExecutorMockRecorder struct {
	mock *MockQueryExecutor
}

// NewMockQueryExecutor creates a new mock instance.
func NewMockQueryExecutor(ctrl *gomock.Controller) *MockQueryExecutor {
	mock := &MockQueryExecutor{ctrl: ctrl}
	mock.recorder = &MockQueryExecutorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQueryExecutor) EXPECT() *MockQueryExecutorMockRecorder {
	return m.recorder
}

// ExecuteQuery mocks base method.
func (m *MockQueryExecutor) ExecuteQuery(ctx context.Context, sql *model.SQL) (*usecase.ExecuteQueryOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteQuery", ctx, sql)
	ret0, _ := ret[0].(*usecase.ExecuteQueryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteQuery indicates an expected call of ExecuteQuery.
func (mr *MockQueryExecutorMockRecorder) ExecuteQuery(ctx, sql any) *MockQueryExecutorExecuteQueryCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteQuery", reflect.TypeOf((*MockQueryExecutor)(nil).ExecuteQuery), ctx, sql)
	return &MockQueryExecutorExecuteQueryCall{Call: call}
}

// MockQueryExecutorExecuteQueryCall wrap *gomock.Call
type MockQueryExecutorExecuteQueryCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockQueryExecutorExecuteQueryCall) Return(arg0 *usecase.ExecuteQueryOutput, arg1 error) *MockQueryExecutorExecuteQueryCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockQueryExecutorExecuteQueryCall) Do(f func(context.Context, *model.SQL) (*usecase.ExecuteQueryOutput, error)) *MockQueryExecutorExecuteQueryCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockQueryExecutorExecuteQueryCall) DoAndReturn(f func(context.Context, *model.SQL) (*usecase.ExecuteQueryOutput, error)) *MockQueryExecutorExecuteQueryCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockTablesGetter is a mock of TablesGetter interface.
type MockTablesGetter struct {
	ctrl     *gomock.Controller
	recorder *MockTablesGetterMockRecorder
	isgomock struct{}
}

// MockTablesGetterMockRecorder is the mock recorder for MockTablesGetter.
type MockTablesGetterMockRecorder struct {
	mock *MockTablesGetter
}

// NewMockTablesGetter creates a new mock instance.
func NewMockTablesGetter(ctrl *gomock.Controller) *MockTablesGetter {
	mock := &MockTablesGetter{ctrl: ctrl}
	mock.recorder = &MockTablesGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTablesGetter) EXPECT() *MockTablesGetterMockRecorder {
	return m.recorder
}

// GetTables mocks base method.
func (m *MockTablesGetter) GetTables(ctx context.Context) ([]*model.Table, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTables", ctx)
	ret0, _ := ret[0].([]*model.Table)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTables indicates an expected call of GetTables.
func (mr *MockTablesGetterMockRecorder) GetTables(ctx any) *MockTablesGetterGetTablesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTables", reflect.TypeOf((*MockTablesGetter)(nil).GetTables), ctx)
	return &MockTablesGetterGetTablesCall{Call: call}
}

// MockTablesGetterGetTablesCall wrap *gomock.Call
type MockTablesGetterGetTablesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTablesGetterGetTablesCall) Return(arg0 []*model.Table, arg1 error) *MockTablesGetterGetTablesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTablesGetterGetTablesCall) Do(f func(context.Context) ([]*model.Table, error)) *MockTablesGetterGetTablesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTablesGetterGetTablesCall) DoAndReturn(f func(context.Context) ([]*model.Table, error)) *MockTablesGetterGetTablesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
