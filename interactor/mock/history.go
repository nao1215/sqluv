// Code generated by MockGen. DO NOT EDIT.
// Source: history.go
//
// Generated by this command:
//
//	mockgen -typed -source=history.go -destination=../interactor/mock/history.go -package mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	model "github.com/nao1215/sqluv/domain/model"
	gomock "go.uber.org/mock/gomock"
)

// MockHistoryTableCreator is a mock of HistoryTableCreator interface.
type MockHistoryTableCreator struct {
	ctrl     *gomock.Controller
	recorder *MockHistoryTableCreatorMockRecorder
	isgomock struct{}
}

// MockHistoryTableCreatorMockRecorder is the mock recorder for MockHistoryTableCreator.
type MockHistoryTableCreatorMockRecorder struct {
	mock *MockHistoryTableCreator
}

// NewMockHistoryTableCreator creates a new mock instance.
func NewMockHistoryTableCreator(ctrl *gomock.Controller) *MockHistoryTableCreator {
	mock := &MockHistoryTableCreator{ctrl: ctrl}
	mock.recorder = &MockHistoryTableCreatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHistoryTableCreator) EXPECT() *MockHistoryTableCreatorMockRecorder {
	return m.recorder
}

// CreateTable mocks base method.
func (m *MockHistoryTableCreator) CreateTable(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTable", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTable indicates an expected call of CreateTable.
func (mr *MockHistoryTableCreatorMockRecorder) CreateTable(ctx any) *MockHistoryTableCreatorCreateTableCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTable", reflect.TypeOf((*MockHistoryTableCreator)(nil).CreateTable), ctx)
	return &MockHistoryTableCreatorCreateTableCall{Call: call}
}

// MockHistoryTableCreatorCreateTableCall wrap *gomock.Call
type MockHistoryTableCreatorCreateTableCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockHistoryTableCreatorCreateTableCall) Return(arg0 error) *MockHistoryTableCreatorCreateTableCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockHistoryTableCreatorCreateTableCall) Do(f func(context.Context) error) *MockHistoryTableCreatorCreateTableCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockHistoryTableCreatorCreateTableCall) DoAndReturn(f func(context.Context) error) *MockHistoryTableCreatorCreateTableCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockHistoryCreator is a mock of HistoryCreator interface.
type MockHistoryCreator struct {
	ctrl     *gomock.Controller
	recorder *MockHistoryCreatorMockRecorder
	isgomock struct{}
}

// MockHistoryCreatorMockRecorder is the mock recorder for MockHistoryCreator.
type MockHistoryCreatorMockRecorder struct {
	mock *MockHistoryCreator
}

// NewMockHistoryCreator creates a new mock instance.
func NewMockHistoryCreator(ctrl *gomock.Controller) *MockHistoryCreator {
	mock := &MockHistoryCreator{ctrl: ctrl}
	mock.recorder = &MockHistoryCreatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHistoryCreator) EXPECT() *MockHistoryCreatorMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockHistoryCreator) Create(ctx context.Context, history model.History) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, history)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockHistoryCreatorMockRecorder) Create(ctx, history any) *MockHistoryCreatorCreateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockHistoryCreator)(nil).Create), ctx, history)
	return &MockHistoryCreatorCreateCall{Call: call}
}

// MockHistoryCreatorCreateCall wrap *gomock.Call
type MockHistoryCreatorCreateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockHistoryCreatorCreateCall) Return(arg0 error) *MockHistoryCreatorCreateCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockHistoryCreatorCreateCall) Do(f func(context.Context, model.History) error) *MockHistoryCreatorCreateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockHistoryCreatorCreateCall) DoAndReturn(f func(context.Context, model.History) error) *MockHistoryCreatorCreateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockHistoryLister is a mock of HistoryLister interface.
type MockHistoryLister struct {
	ctrl     *gomock.Controller
	recorder *MockHistoryListerMockRecorder
	isgomock struct{}
}

// MockHistoryListerMockRecorder is the mock recorder for MockHistoryLister.
type MockHistoryListerMockRecorder struct {
	mock *MockHistoryLister
}

// NewMockHistoryLister creates a new mock instance.
func NewMockHistoryLister(ctrl *gomock.Controller) *MockHistoryLister {
	mock := &MockHistoryLister{ctrl: ctrl}
	mock.recorder = &MockHistoryListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHistoryLister) EXPECT() *MockHistoryListerMockRecorder {
	return m.recorder
}

// List mocks base method.
func (m *MockHistoryLister) List(ctx context.Context) (model.Histories, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx)
	ret0, _ := ret[0].(model.Histories)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockHistoryListerMockRecorder) List(ctx any) *MockHistoryListerListCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockHistoryLister)(nil).List), ctx)
	return &MockHistoryListerListCall{Call: call}
}

// MockHistoryListerListCall wrap *gomock.Call
type MockHistoryListerListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockHistoryListerListCall) Return(arg0 model.Histories, arg1 error) *MockHistoryListerListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockHistoryListerListCall) Do(f func(context.Context) (model.Histories, error)) *MockHistoryListerListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockHistoryListerListCall) DoAndReturn(f func(context.Context) (model.Histories, error)) *MockHistoryListerListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
