// Code generated by MockGen. DO NOT EDIT.
// Source: file.go
//
// Generated by this command:
//
//	mockgen -typed -source=file.go -destination=../interactor/mock/file.go -package mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	model "github.com/nao1215/sqluv/domain/model"
	gomock "go.uber.org/mock/gomock"
)

// MockFileReader is a mock of FileReader interface.
type MockFileReader struct {
	ctrl     *gomock.Controller
	recorder *MockFileReaderMockRecorder
	isgomock struct{}
}

// MockFileReaderMockRecorder is the mock recorder for MockFileReader.
type MockFileReaderMockRecorder struct {
	mock *MockFileReader
}

// NewMockFileReader creates a new mock instance.
func NewMockFileReader(ctrl *gomock.Controller) *MockFileReader {
	mock := &MockFileReader{ctrl: ctrl}
	mock.recorder = &MockFileReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileReader) EXPECT() *MockFileReaderMockRecorder {
	return m.recorder
}

// Read mocks base method.
func (m *MockFileReader) Read(ctx context.Context, file *model.File) (*model.Table, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", ctx, file)
	ret0, _ := ret[0].(*model.Table)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockFileReaderMockRecorder) Read(ctx, file any) *MockFileReaderReadCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockFileReader)(nil).Read), ctx, file)
	return &MockFileReaderReadCall{Call: call}
}

// MockFileReaderReadCall wrap *gomock.Call
type MockFileReaderReadCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFileReaderReadCall) Return(arg0 *model.Table, arg1 error) *MockFileReaderReadCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFileReaderReadCall) Do(f func(context.Context, *model.File) (*model.Table, error)) *MockFileReaderReadCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFileReaderReadCall) DoAndReturn(f func(context.Context, *model.File) (*model.Table, error)) *MockFileReaderReadCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockFileWriter is a mock of FileWriter interface.
type MockFileWriter struct {
	ctrl     *gomock.Controller
	recorder *MockFileWriterMockRecorder
	isgomock struct{}
}

// MockFileWriterMockRecorder is the mock recorder for MockFileWriter.
type MockFileWriterMockRecorder struct {
	mock *MockFileWriter
}

// NewMockFileWriter creates a new mock instance.
func NewMockFileWriter(ctrl *gomock.Controller) *MockFileWriter {
	mock := &MockFileWriter{ctrl: ctrl}
	mock.recorder = &MockFileWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileWriter) EXPECT() *MockFileWriterMockRecorder {
	return m.recorder
}

// WriteFile mocks base method.
func (m *MockFileWriter) WriteFile(ctx context.Context, file *model.File, table *model.Table) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteFile", ctx, file, table)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteFile indicates an expected call of WriteFile.
func (mr *MockFileWriterMockRecorder) WriteFile(ctx, file, table any) *MockFileWriterWriteFileCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteFile", reflect.TypeOf((*MockFileWriter)(nil).WriteFile), ctx, file, table)
	return &MockFileWriterWriteFileCall{Call: call}
}

// MockFileWriterWriteFileCall wrap *gomock.Call
type MockFileWriterWriteFileCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFileWriterWriteFileCall) Return(arg0 error) *MockFileWriterWriteFileCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFileWriterWriteFileCall) Do(f func(context.Context, *model.File, *model.Table) error) *MockFileWriterWriteFileCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFileWriterWriteFileCall) DoAndReturn(f func(context.Context, *model.File, *model.Table) error) *MockFileWriterWriteFileCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
